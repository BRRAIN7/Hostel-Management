///*
// * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
// * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
// */
//package UserInterface;
//
//import Entities.Staff;
//import Services.StaffController;
//
//import javax.swing.*;
//import javax.swing.table.DefaultTableModel;
//
///**
// *
// * @author karole
// */
//public class UpdateAndDeleteStaffUI extends javax.swing.JFrame {
//
//    /**
//     * Creates new form UpdateAndDeleteStaff
//     */
//    public UpdateAndDeleteStaffUI() {
//        initComponents();
//    }
//
//    /**
//     * This method is called from within the constructor to initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is always
//     * regenerated by the Form Editor.
//     */
//    @SuppressWarnings("unchecked")
//    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
//    private void initComponents() {
//
//        jLabel1 = new javax.swing.JLabel();
//        jLabel2 = new javax.swing.JLabel();
//        jTextField1 = new javax.swing.JTextField();
//        jButton1 = new javax.swing.JButton();
//        jLabel3 = new javax.swing.JLabel();
//        jScrollPane1 = new javax.swing.JScrollPane();
//        jTable1 = new javax.swing.JTable();
//        jLabel4 = new javax.swing.JLabel();
//        jLabel5 = new javax.swing.JLabel();
//        jLabel6 = new javax.swing.JLabel();
//        jLabel7 = new javax.swing.JLabel();
//        jLabel8 = new javax.swing.JLabel();
//        jLabel9 = new javax.swing.JLabel();
//        jLabel10 = new javax.swing.JLabel();
//        jTextField2 = new javax.swing.JTextField();
//        jTextField3 = new javax.swing.JTextField();
//        jTextField4 = new javax.swing.JTextField();
//        jTextField5 = new javax.swing.JTextField();
//        jTextField6 = new javax.swing.JTextField();
//        jTextField7 = new javax.swing.JTextField();
//        jButton2 = new javax.swing.JButton();
//        jButton3 = new javax.swing.JButton();
//        jButton4 = new javax.swing.JButton();
//
//        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
//
//        jLabel1.setText("Manage Staff");
//
//        jLabel2.setText("Search by ID");
//
//        jButton1.setText("Search");
//        jButton1.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton1ActionPerformed(evt);
//            }
//        });
//
//        jLabel3.setText("Staff Info");
//
//        jTable1.setModel(new javax.swing.table.DefaultTableModel(
//                new Object [][] {},
//                new String [] {
//                        "Staff ID", "Name", "Role", "Contact", "Email", "Address", "Salary"
//                }
//        ));
//        jScrollPane1.setViewportView(jTable1);
//
//        jLabel4.setText("Selected Student Details");
//
//        jLabel5.setText("Name");
//
//        jLabel6.setText("Role");
//
//        jLabel7.setText("Contact");
//
//        jLabel8.setText("Email");
//
//        jLabel9.setText("Address");
//
//        jLabel10.setText("Salary");
//
//        jButton2.setText("Update");
//        jButton2.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton2ActionPerformed(evt);
//            }
//        });
//
//        jButton3.setText("Reset");
//        jButton3.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton3ActionPerformed(evt);
//            }
//        });
//
//        jButton4.setText("Delete Staff");
//        jButton4.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton4ActionPerformed(evt);
//            }
//        });
//
//        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
//        getContentPane().setLayout(layout);
//        layout.setHorizontalGroup(
//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(layout.createSequentialGroup()
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                    .addGroup(layout.createSequentialGroup()
//                        .addContainerGap()
//                        .addComponent(jScrollPane1))
//                    .addGroup(layout.createSequentialGroup()
//                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                            .addGroup(layout.createSequentialGroup()
//                                .addGap(60, 60, 60)
//                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addGap(42, 42, 42)
//                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addGap(58, 58, 58)
//                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                    .addComponent(jButton1)
//                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
//                            .addGroup(layout.createSequentialGroup()
//                                .addGap(384, 384, 384)
//                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
//                            .addGroup(layout.createSequentialGroup()
//                                .addContainerGap()
//                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
//                            .addGroup(layout.createSequentialGroup()
//                                .addGap(48, 48, 48)
//                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addGroup(layout.createSequentialGroup()
//                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
//                                    .addGroup(layout.createSequentialGroup()
//                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE))
//                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
//                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                                                .addComponent(jTextField2)
//                                                .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
//                                            .addGroup(layout.createSequentialGroup()
//                                                .addGap(6, 6, 6)
//                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
//                                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
//                                                    .addGroup(layout.createSequentialGroup()
//                                                        .addComponent(jButton3)
//                                                        .addGap(33, 33, 33)
//                                                        .addComponent(jButton4))))))))
//                            .addGroup(layout.createSequentialGroup()
//                                .addGap(40, 40, 40)
//                                .addComponent(jButton2)))
//                        .addGap(0, 387, Short.MAX_VALUE)))
//                .addContainerGap())
//        );
//        layout.setVerticalGroup(
//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(layout.createSequentialGroup()
//                .addContainerGap()
//                .addComponent(jLabel1)
//                .addGap(36, 36, 36)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
//                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//                    .addComponent(jButton1))
//                .addGap(18, 18, 18)
//                .addComponent(jLabel3)
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(34, 34, 34)
//                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel5)
//                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel6)
//                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
//                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
//                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
//                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
//                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(18, 18, 18)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jButton2)
//                    .addComponent(jButton3)
//                    .addComponent(jButton4))
//                .addContainerGap(78, Short.MAX_VALUE))
//        );
//
//        pack();
//    }// </editor-fold>//GEN-END:initComponents
//
//    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
//        String staffId = jTextField1.getText().trim();
//
//        if (staffId.isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Please enter Staff ID.");
//            return;
//        }
//
//        Staff staff = StaffController.searchStaff(staffId);
//
//        if (staff == null) {
//            JOptionPane.showMessageDialog(this, "No staff found with ID: " + staffId);
//            return;
//        }
//
//        // Populate the text fields
//        jTextField2.setText(staff.getName());
//        jTextField3.setText(staff.getRole());
//        jTextField4.setText(staff.getContactNumber());
//        jTextField5.setText(staff.getEmail());
//        jTextField6.setText(staff.getAddress());
//        jTextField7.setText(String.valueOf(staff.getSalary()));
//
//        // Update table with the result
//        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//        model.setRowCount(0); // Clear previous data
//        model.addRow(new Object[]{
//                staff.getStaffId(),
//                staff.getName(),
//                staff.getRole(),
//                staff.getContactNumber(),
//                staff.getEmail(),
//                staff.getAddress(),
//                staff.getSalary()
//        });
//    }
//
//
//    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
//        try {
//            String staffId = jTextField1.getText().trim();
//            String name = jTextField2.getText().trim();
//            String role = jTextField3.getText().trim();
//            String contact = jTextField4.getText().trim();
//            String email = jTextField5.getText().trim();
//            String address = jTextField6.getText().trim();
//            float salary = Float.parseFloat(jTextField7.getText().trim());
//
//            if (staffId.isEmpty() || name.isEmpty() || role.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Staff ID, Name, and Role are required.");
//                return;
//            }
//
//            Staff staff = new Staff( name,contact,address,email,staffId,role,salary );
//            System.out.println("Updating Staff ID: " + staff.getStaffId());
//            boolean success = StaffController.updateStaff(staff);
//
//            if (success) {
//                JOptionPane.showMessageDialog(this, "Staff updated successfully.");
//                jButton1ActionPerformed(null); // Refresh
//            } else {
//                JOptionPane.showMessageDialog(this, "Update failed. Please check the Staff ID.");
//            }
//
//        } catch (NumberFormatException e) {
//            JOptionPane.showMessageDialog(this, "Salary must be a valid number.");
//        }
//    }
//
//    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//        jTextField1.setText("");
//        jTextField2.setText("");
//        jTextField3.setText("");
//        jTextField4.setText("");
//        jTextField5.setText("");
//        jTextField6.setText("");
//        jTextField7.setText("");
//    }
//
//    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
//        String staffId = jTextField1.getText().trim();
//
//        if (staffId.isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Enter Staff ID to delete.");
//            return;
//        }
//
//        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete Staff ID: " + staffId + "?", "Confirm", JOptionPane.YES_NO_OPTION);
//        if (confirm != JOptionPane.YES_OPTION) return;
//
//        boolean success = StaffController.deleteStaff(staffId);
//        if (success) {
//            JOptionPane.showMessageDialog(this, "Staff deleted successfully.");
//            jTextField1.setText("");
//            jTextField2.setText("");
//            jTextField3.setText("");
//            jTextField4.setText("");
//            jTextField5.setText("");
//            jTextField6.setText("");
//            jTextField7.setText("");
//            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//            model.setRowCount(0);
//        } else {
//            JOptionPane.showMessageDialog(this, "Delete failed. Staff ID not found.");
//        }
//    }
//
//
//    public void openManageStaff() {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(UpdateAndDeleteStaffUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(UpdateAndDeleteStaffUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(UpdateAndDeleteStaffUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(UpdateAndDeleteStaffUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new UpdateAndDeleteStaffUI().setVisible(true);
//            }
//        });
//    }
//
//    // Variables declaration - do not modify//GEN-BEGIN:variables
//    private javax.swing.JButton jButton1;
//    private javax.swing.JButton jButton2;
//    private javax.swing.JButton jButton3;
//    private javax.swing.JButton jButton4;
//    private javax.swing.JLabel jLabel1;
//    private javax.swing.JLabel jLabel10;
//    private javax.swing.JLabel jLabel2;
//    private javax.swing.JLabel jLabel3;
//    private javax.swing.JLabel jLabel4;
//    private javax.swing.JLabel jLabel5;
//    private javax.swing.JLabel jLabel6;
//    private javax.swing.JLabel jLabel7;
//    private javax.swing.JLabel jLabel8;
//    private javax.swing.JLabel jLabel9;
//    private javax.swing.JScrollPane jScrollPane1;
//    private javax.swing.JTable jTable1;
//    private javax.swing.JTextField jTextField1;
//    private javax.swing.JTextField jTextField2;
//    private javax.swing.JTextField jTextField3;
//    private javax.swing.JTextField jTextField4;
//    private javax.swing.JTextField jTextField5;
//    private javax.swing.JTextField jTextField6;
//    private javax.swing.JTextField jTextField7;
//    // End of variables declaration//GEN-END:variables
//}

package UserInterface;

import Entities.Staff;
import Services.StaffController;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;

public class UpdateAndDeleteStaffUI extends JFrame {
    private JTextField searchField;
    private JTable staffTable;
    private JTextField nameField;
    private JTextField roleField;
    private JTextField contactField;
    private JTextField emailField;
    private JTextField addressField;
    private JTextField salaryField;
    private DefaultTableModel tableModel;

    public UpdateAndDeleteStaffUI() {
        setTitle("Manage Staff");
        setSize(1300, 700);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        // Background Image
        try {
            // Using an image panel as the content pane
            ImagePanel backgroundPanel = new ImagePanel("src/UserInterface/h6.jpg");
            backgroundPanel.setLayout(new BorderLayout());
            setContentPane(backgroundPanel);
        } catch (Exception e) {
            // Fallback to solid color if image fails to load
            JOptionPane.showMessageDialog(this,
                    "Failed to load background image: " + e.getMessage(),
                    "Resource Error",
                    JOptionPane.ERROR_MESSAGE);

            // Set a fallback background color
            JPanel fallbackPanel = new JPanel();
            fallbackPanel.setBackground(new Color(220, 225, 230));
            fallbackPanel.setLayout(new BorderLayout());
            setContentPane(fallbackPanel);
        }

        // Main panel with semi-transparent background for better text visibility
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        mainPanel.setOpaque(false);  // Make it transparent to show background image

        // Add title
        JLabel titleLabel = new JLabel("Manage Staff");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 18));
        titleLabel.setForeground(Color.BLACK);
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(titleLabel);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 20)));

        // Search panel - semi-transparent
        JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        searchPanel.setOpaque(false);
        JLabel searchLabel = new JLabel("Search by ID");
        searchLabel.setForeground(Color.BLACK);
        searchField = new JTextField(20);
        JButton searchButton = new JButton("Search");

        searchPanel.add(searchLabel);
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        mainPanel.add(searchPanel);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));

        // Staff Info label
        JLabel staffInfoLabel = new JLabel("Staff Info");
        staffInfoLabel.setForeground(Color.BLACK);
        staffInfoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        staffInfoLabel.setFont(new Font("Arial",Font.BOLD,16));
        mainPanel.add(staffInfoLabel);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 5)));

        // Staff Table with custom appearance
        String[] columns = {"Staff ID", "Name", "Role", "Contact", "Email", "Address", "Salary"};
        Object[][] data = {};
        tableModel = new DefaultTableModel(data, columns) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make table cells non-editable
                return false;
            }
        };

        staffTable = new JTable(tableModel);
        staffTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        staffTable.setFillsViewportHeight(true);
        staffTable.setBackground(new Color(255, 255, 255, 220)); // Semi-transparent white

        JScrollPane scrollPane = new JScrollPane(staffTable);
        scrollPane.setPreferredSize(new Dimension(800, 150));
        scrollPane.setMaximumSize(new Dimension(2000, 150));
        mainPanel.add(scrollPane);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 20)));

        // Selected Student Details label
        JLabel detailsLabel = new JLabel("Selected Student Details");
        detailsLabel.setForeground(Color.darkGray);
        detailsLabel.setFont(new Font("Arial",Font.BOLD,16));
        detailsLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(detailsLabel);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));

        // Form Fields - make panel semi-transparent
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.anchor = GridBagConstraints.WEST;

        // Name field
        gbc.gridx = 0;
        gbc.gridy = 0;
        JLabel nameLabel = new JLabel("Name");
        nameLabel.setForeground(Color.darkGray);
        nameLabel.setFont(new Font("Arial",Font.BOLD,14));
        formPanel.add(nameLabel, gbc);

        gbc.gridx = 1;
        nameField = new JTextField(15);
        formPanel.add(nameField, gbc);

        // Role field
        gbc.gridx = 0;
        gbc.gridy = 1;
        JLabel roleLabel = new JLabel("Role");
        roleLabel.setFont(new Font("Arial",Font.BOLD,14));
        roleLabel.setForeground(Color.darkGray);
        formPanel.add(roleLabel, gbc);

        gbc.gridx = 1;
        roleField = new JTextField(15);
        formPanel.add(roleField, gbc);

        // Contact field
        gbc.gridx = 0;
        gbc.gridy = 2;
        JLabel contactLabel = new JLabel("Contact");
        contactLabel.setFont(new Font("Arial",Font.BOLD,14));
        contactLabel.setForeground(Color.darkGray);
        formPanel.add(contactLabel, gbc);

        gbc.gridx = 1;
        contactField = new JTextField(15);
        formPanel.add(contactField, gbc);

        // Email field
        gbc.gridx = 0;
        gbc.gridy = 3;
        JLabel emailLabel = new JLabel("Email");
        emailLabel.setFont(new Font("Arial",Font.BOLD,14));
        emailLabel.setForeground(Color.darkGray);
        formPanel.add(emailLabel, gbc);

        gbc.gridx = 1;
        emailField = new JTextField(15);
        formPanel.add(emailField, gbc);

        // Address field
        gbc.gridx = 0;
        gbc.gridy = 4;
        JLabel addressLabel = new JLabel("Address");
        addressLabel.setFont(new Font("Arial",Font.BOLD,14));
        addressLabel.setForeground(Color.darkGray);
        formPanel.add(addressLabel, gbc);

        gbc.gridx = 1;
        addressField = new JTextField(15);
        formPanel.add(addressField, gbc);

        // Salary field
        gbc.gridx = 0;
        gbc.gridy = 5;
        JLabel salaryLabel = new JLabel("Salary");
        salaryLabel.setFont(new Font("Arial",Font.BOLD,14));
        salaryLabel.setForeground(Color.darkGray);
        formPanel.add(salaryLabel, gbc);

        gbc.gridx = 1;
        salaryField = new JTextField(15);
        formPanel.add(salaryField, gbc);

        mainPanel.add(formPanel);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 15)));

        // Button Panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        buttonPanel.setOpaque(false);

        JButton updateButton = new JButton("Update");
        JButton resetButton = new JButton("Reset");
        JButton deleteButton = new JButton("Delete Staff");

        buttonPanel.add(updateButton);
        buttonPanel.add(resetButton);
        buttonPanel.add(deleteButton);

        mainPanel.add(buttonPanel);
        getContentPane().add(mainPanel);

//        // Add event listeners with error handling
//        staffTable.addMouseListener(new MouseAdapter() {
//            @Override
//            public void mouseClicked(MouseEvent e) {
//                try {
//                    int selectedRow = staffTable.getSelectedRow();
//                    if (selectedRow >= 0) {
//                        nameField.setText(tableModel.getValueAt(selectedRow, 1).toString());
//                        roleField.setText(tableModel.getValueAt(selectedRow, 2).toString());
//                        contactField.setText(tableModel.getValueAt(selectedRow, 3).toString());
//                        emailField.setText(tableModel.getValueAt(selectedRow, 4).toString());
//                        addressField.setText(tableModel.getValueAt(selectedRow, 5).toString());
//                        salaryField.setText(tableModel.getValueAt(selectedRow, 6).toString());
//                    }
//                } catch (Exception ex) {
//                    showError("Error loading staff details: " + ex.getMessage());
//                }
//            }
//        });

        searchButton.addActionListener(e -> searchStaffById());


        updateButton.addActionListener(e -> updateStaff());


        resetButton.addActionListener(e -> resetForm());


        deleteButton.addActionListener(e -> deleteStaff());

    }
    private void searchStaffById() {
        String staffId = searchField.getText().trim();

        if (staffId.isEmpty()) {
            showWarning("Please enter Staff ID.");
            return;
        }

        Staff staff = StaffController.searchStaff(staffId);

        if (staff == null) {
            showInfo("No staff found with ID: " + staffId);
            return;
        }

        // Populate the form fields
        nameField.setText(staff.getName());
        roleField.setText(staff.getRole());
        contactField.setText(staff.getContactNumber());
        emailField.setText(staff.getEmail());
        addressField.setText(staff.getAddress());
        salaryField.setText(String.valueOf(staff.getSalary()));

        // Populate table with the result
        tableModel.setRowCount(0); // Clear previous data
        tableModel.addRow(new Object[]{
                staff.getStaffId(),
                staff.getName(),
                staff.getRole(),
                staff.getContactNumber(),
                staff.getEmail(),
                staff.getAddress(),
                staff.getSalary()
        });
    }

    private void resetForm() {
        searchField.setText("");
        nameField.setText("");
        roleField.setText("");
        contactField.setText("");
        emailField.setText("");
        addressField.setText("");
        salaryField.setText("");
        staffTable.clearSelection();
    }
    private void deleteStaff() {
        String staffId = searchField.getText().trim();

        if (staffId.isEmpty()) {
            showWarning("Enter Staff ID to delete.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete Staff ID: " + staffId + "?",
                "Confirm",
                JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) return;

        boolean success = StaffController.deleteStaff(staffId);

        if (success) {
            showSuccess("Staff deleted successfully.");
            resetForm();
            tableModel.setRowCount(0); // Clear table
        } else {
            showError("Delete failed. Staff ID not found.");
        }
    }
    private void updateStaff() {
        try {
            String staffId = searchField.getText().trim();
            String name = nameField.getText().trim();
            String role = roleField.getText().trim();
            String contact = contactField.getText().trim();
            String email = emailField.getText().trim();
            String address = addressField.getText().trim();
            float salary = Float.parseFloat(salaryField.getText().trim());

            if (staffId.isEmpty() || name.isEmpty() || role.isEmpty()) {
                showWarning("Staff ID, Name, and Role are required.");
                return;
            }

            Staff staff = new Staff(name, contact, address, email, staffId, role, salary);
            boolean success = StaffController.updateStaff(staff);

            if (success) {
                showSuccess("Staff updated successfully.");
                searchStaffById(); // Refresh data
            } else {
                showError("Update failed. Please check the Staff ID.");
            }

        } catch (NumberFormatException e) {
            showWarning("Salary must be a valid number.");
        }
    }


    // Helper methods for error handling
    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showWarning(String message) {
        JOptionPane.showMessageDialog(this, message, "Warning", JOptionPane.WARNING_MESSAGE);
    }

    private void showInfo(String message) {
        JOptionPane.showMessageDialog(this, message, "Information", JOptionPane.INFORMATION_MESSAGE);
    }

    private void showSuccess(String message) {
        JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    // Custom JPanel class that paints a background image
    class ImagePanel extends JPanel {
        private Image backgroundImage;

        public ImagePanel(String imagePath) throws Exception {
            // Check if file exists
            File file = new File(imagePath);
            if (!file.exists()) {
                throw new Exception("Background image file not found: " + imagePath);
            }

            backgroundImage = new ImageIcon(imagePath).getImage();
            if (backgroundImage.getWidth(null) <= 0 || backgroundImage.getHeight(null) <= 0) {
                throw new Exception("Invalid or corrupted image file");
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            // Draw the background image
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }
    }

    public void openManageStaff() {
        try {
            // Set system look and feel
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UpdateAndDeleteStaffUI frame = new UpdateAndDeleteStaffUI();
                    frame.setVisible(true);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null,
                            "Error starting application: " + e.getMessage(),
                            "Startup Error",
                            JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        });
    }
}