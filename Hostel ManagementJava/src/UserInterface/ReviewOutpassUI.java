///*
// * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
// * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
// */
//package UserInterface;
//
//import DAO.OutpassOperations;
//import Entities.Outpass;
//import Services.Session;
//
//import javax.swing.*;
//import javax.swing.table.DefaultTableModel;
//import java.util.List;
//
///**
// *
// * @author karole
// */
//public class ReviewOutpassUI extends javax.swing.JFrame {
//
//    /**
//     * Creates new form ReviewOutpassUI
//     */
//    public ReviewOutpassUI() {
//        initComponents();
//        loadPendingOutpasses();
//    }
//    private void loadPendingOutpasses() {
//        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//        model.setRowCount(0); // Clear table
//
//        try {
//            List<Outpass> pendingList = new OutpassOperations().getPendingOutpasses();
//
//            for (Outpass outpass : pendingList) {
//                model.addRow(new Object[]{
//                        outpass.getOutpassId(),
//                        outpass.getDateOfIssue(),
//                        outpass.getDepartureTime(),
//                        outpass.getReturnTime(),
//                        outpass.getPurpose(),
//                        outpass.getApplierId()
//                });
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Error loading pending outpasses: " + e.getMessage());
//            e.printStackTrace();
//        }
//    }
//
//    /**
//     * This method is called from within the constructor to initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is always
//     * regenerated by the Form Editor.
//     */
//    @SuppressWarnings("unchecked")
//    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
//    private void initComponents() {
//
//        jLabel1 = new javax.swing.JLabel();
//        jScrollPane1 = new javax.swing.JScrollPane();
//        jTable1 = new javax.swing.JTable();
//        jLabel2 = new javax.swing.JLabel();
//        jLabel3 = new javax.swing.JLabel();
//        jTextField1 = new javax.swing.JTextField();
//        jButton1 = new javax.swing.JButton();
//        jButton2 = new javax.swing.JButton();
//        jLabel4 = new javax.swing.JLabel();
//        jTextField2 = new javax.swing.JTextField();
//
//        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
//
//        jLabel1.setText("Review Outpass");
//
//        jTable1.setModel(new javax.swing.table.DefaultTableModel(
//            new Object [][] {
//                {null, null, null, null, null, null},
//                {null, null, null, null, null, null},
//                {null, null, null, null, null, null},
//                {null, null, null, null, null, null}
//            },
//            new String [] {
//                "Outpass ID", "Date of Issue", "Departure Time", "Return Time", "Purpose", "Applier ID"
//            }
//        ));
//        jScrollPane1.setViewportView(jTable1);
//
//        jLabel2.setText("Pending Outpass Details");
//
//        jLabel3.setText("OutpassID ");
//
//        jButton1.setText("Approve");
//        jButton1.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton1ActionPerformed(evt);
//            }
//        });
//
//        jButton2.setText("Reject");
//        jButton2.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jButton2ActionPerformed(evt);
//            }
//        });
//
//        jLabel4.setText("Comments");
//
//        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
//        getContentPane().setLayout(layout);
//        layout.setHorizontalGroup(
//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(layout.createSequentialGroup()
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                    .addGroup(layout.createSequentialGroup()
//                        .addGap(395, 395, 395)
//                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
//                    .addGroup(layout.createSequentialGroup()
//                        .addGap(23, 23, 23)
//                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE))
//                    .addGroup(layout.createSequentialGroup()
//                        .addGap(36, 36, 36)
//                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
//                    .addGroup(layout.createSequentialGroup()
//                        .addGap(65, 65, 65)
//                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                            .addGroup(layout.createSequentialGroup()
//                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                .addGap(68, 68, 68)
//                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
//                            .addGroup(layout.createSequentialGroup()
//                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
//                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
//                                .addGap(90, 90, 90)
//                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
//                                    .addComponent(jTextField1)
//                                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))))))
//                .addContainerGap(28, Short.MAX_VALUE))
//        );
//        layout.setVerticalGroup(
//            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//            .addGroup(layout.createSequentialGroup()
//                .addContainerGap()
//                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(27, 27, 27)
//                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(18, 18, 18)
//                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
//                .addGap(51, 51, 51)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
//                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jLabel4)
//                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//                .addGap(22, 22, 22)
//                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//                    .addComponent(jButton1)
//                    .addComponent(jButton2))
//                .addContainerGap(127, Short.MAX_VALUE))
//        );
//
//        pack();
//    }// </editor-fold>//GEN-END:initComponents
//
//    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
//        String outpassId = jTextField1.getText().trim();
//        String comment= jTextField2.getText();
//
//        String id = Session.getUserId();
//
//        if (!outpassId.isEmpty()) {
//            boolean result = Services.OutpassController.approveOutpass(outpassId, id,comment); // Hardcoded Warden ID for now
//            if (result) {
//                JOptionPane.showMessageDialog(this, "Outpass approved successfully!");
//            } else {
//                JOptionPane.showMessageDialog(this, "Failed to approve outpass.");
//            }
//        } else {
//            JOptionPane.showMessageDialog(this, "Please enter a valid Outpass ID.");
//        }
//    }
//
//    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
//        String outpassId = jTextField1.getText().trim();
//        String comment= jTextField2.getText();
//
//        String id = Session.getUserId();
//        if (!outpassId.isEmpty()) {
//            boolean result = Services.OutpassController.rejectOutpass(outpassId, id,comment);
//            if (result) {
//                JOptionPane.showMessageDialog(this, "Outpass rejected successfully!");
//            } else {
//                JOptionPane.showMessageDialog(this, "Failed to reject outpass.");
//            }
//        } else {
//            JOptionPane.showMessageDialog(this, "Please enter a valid Outpass ID.");
//        }
//    }
//
//
//    public void reviewOutpass() {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ReviewOutpassUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ReviewOutpassUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ReviewOutpassUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ReviewOutpassUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ReviewOutpassUI().setVisible(true);
//            }
//        });
//    }
//
//    // Variables declaration - do not modify//GEN-BEGIN:variables
//    private javax.swing.JButton jButton1;
//    private javax.swing.JButton jButton2;
//    private javax.swing.JLabel jLabel1;
//    private javax.swing.JLabel jLabel2;
//    private javax.swing.JLabel jLabel3;
//    private javax.swing.JLabel jLabel4;
//    private javax.swing.JScrollPane jScrollPane1;
//    private javax.swing.JTable jTable1;
//    private javax.swing.JTextField jTextField1;
//    private javax.swing.JTextField jTextField2;
//    // End of variables declaration//GEN-END:variables
//}

package UserInterface;

import DAO.OutpassOperations;
import Entities.Outpass;
import Services.Session;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;

public class ReviewOutpassUI extends JFrame {

    private JTable table;
    private JTextField idField;
    private JTextField commentField;
    private void loadPendingOutpasses() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); // Clear table

        try {
            java.util.List<Outpass> pendingList = new OutpassOperations().getPendingOutpasses();

            for (Outpass outpass : pendingList) {
                model.addRow(new Object[]{
                        outpass.getOutpassId(),
                        outpass.getDateOfIssue(),
                        outpass.getDepartureTime(),
                        outpass.getReturnTime(),
                        outpass.getPurpose(),
                        outpass.getApplierId()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading pending outpasses: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void approveOutpassAction() {
        String outpassId = idField.getText().trim();
        String comment = commentField.getText();
        String id = Session.getUserId();

        if (!outpassId.isEmpty()) {
            boolean result = Services.OutpassController.approveOutpass(outpassId, id, comment);
            if (result) {
                JOptionPane.showMessageDialog(this, "Outpass approved successfully!");
                loadPendingOutpasses(); // refresh the table
            } else {
                JOptionPane.showMessageDialog(this, "Failed to approve outpass.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a valid Outpass ID.");
        }
    }
    private void rejectOutpassAction() {
        String outpassId = idField.getText().trim();
        String comment = commentField.getText();
        String id = Session.getUserId();

        if (!outpassId.isEmpty()) {
            boolean result = Services.OutpassController.rejectOutpass(outpassId, id, comment);
            if (result) {
                JOptionPane.showMessageDialog(this, "Outpass rejected successfully!");
                loadPendingOutpasses(); // refresh the table
            } else {
                JOptionPane.showMessageDialog(this, "Failed to reject outpass.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please enter a valid Outpass ID.");
        }
    }
    public ReviewOutpassUI() {
        setTitle("Review Outpass");
        setSize(1300, 700);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        // Background image
        ImageIcon backgroundIcon = new ImageIcon("src/UserInterface/h6.jpg");
        JLabel backgroundLabel = new JLabel(backgroundIcon);
        backgroundLabel.setLayout(new BorderLayout());
        setContentPane(backgroundLabel);

        // Main panel
        JPanel panel = new JPanel();
        panel.setOpaque(false);
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel title = new JLabel("Review Outpass", SwingConstants.CENTER);
        title.setFont(new Font("Arial", Font.BOLD, 20));
        title.setForeground(Color.BLACK);
        title.setAlignmentX(Component.CENTER_ALIGNMENT);
        panel.add(title);
        panel.add(Box.createRigidArea(new Dimension(0, 10)));

        // Table
        String[] columns = { "Outpass ID", "Date of Issue", "Departure Time", "Return Time", "Purpose", "Applier ID" };
        Object[][] data = {

        };
        DefaultTableModel tableModel = new DefaultTableModel(data, columns);
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(new Dimension(800, 150));
        panel.add(new JLabel("Pending Outpass Details"));
        panel.add(scrollPane);
        panel.add(Box.createRigidArea(new Dimension(0, 20)));

        // Form section
        JPanel formPanel = new JPanel(new GridBagLayout());
        formPanel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);

        JLabel idLabel = new JLabel("OutpassID");
        idLabel.setFont(new Font("Arial", Font.BOLD, 18));
        JLabel commentLabel = new JLabel("Comments");
        commentLabel.setFont(new Font("Arial", Font.BOLD, 18));
        idField = new JTextField(10);
        idField.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));

        commentField = new JTextField(10);
        commentField.setBorder(BorderFactory.createLineBorder(Color.BLACK, 2));



        gbc.gridx = 0;
        gbc.gridy = 0;
        formPanel.add(idLabel, gbc);
        gbc.gridx = 1;
        formPanel.add(idField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        formPanel.add(commentLabel, gbc);
        gbc.gridx = 1;
        formPanel.add(commentField, gbc);

        panel.add(formPanel);
        panel.add(Box.createRigidArea(new Dimension(0, 10)));

        // Buttons
        JPanel buttonPanel = new JPanel();
        buttonPanel.setOpaque(false);
        JButton approveBtn = new JButton("Approve");
        JButton rejectBtn = new JButton("Reject");

        approveBtn.addActionListener(e -> approveOutpassAction());
        rejectBtn.addActionListener(e -> rejectOutpassAction());
        loadPendingOutpasses();
        buttonPanel.add(approveBtn);
        buttonPanel.add(rejectBtn);
        panel.add(buttonPanel);

        add(panel);
    }

    private void handleDecision(String action, DefaultTableModel model) {
        String outpassId = idField.getText().trim();
        String comments = commentField.getText().trim();

        if (outpassId.isEmpty()) {
            showError("Please enter an Outpass ID.");
            return;
        }

        if (comments.isEmpty()) {
            showError("Please enter your comments.");
            return;
        }

        int rowIndex = findRowByOutpassId(model, outpassId);

        if (rowIndex == -1) {
            showError("Invalid Outpass ID. Please select a valid one from the table.");
        } else {
            model.removeRow(rowIndex);
            showMessage("Outpass " + outpassId + " has been " + action.toLowerCase() + " successfully!");
            idField.setText("");
            commentField.setText("");
        }
    }

    private int findRowByOutpassId(DefaultTableModel model, String outpassId) {
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(outpassId)) {
                return i;
            }
        }
        return -1;
    }

    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Input Error", JOptionPane.ERROR_MESSAGE);
    }

    private void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
    }

    public void reviewOutpass() {
        SwingUtilities.invokeLater(() -> new ReviewOutpassUI().setVisible(true));
    }
}
